Diagonal Traversal of a Matrix
Give a N * N square matrix, return all the elements of its diagonals from top to bottom.

Input Format
First line contains N, representing the order of the 2D matrix.

Next N lines contains N spaced elements each representing matrix elements.

Output Format
Output in a sigle line, the Diagonal traversal of the matrix.

The traversal should start from the top right of the matrix in bottom right direction and should continue upto bottom left.

Example 1
Input

2
1 2
3 4
Output

2 1 4 3
Explanation:

Topmost diagonal is [[2]]

Next diagonal is [[1, 4]]

and the last diagonal is [[3]]

Example 2
Input

3
1 2 3
4 5 6
7 8 9
Output

3 2 6 1 5 9 4 8 7
EXPLANATION

Topmost diagonal is [[3]]

Next diagonal is [[2, 6]]

Next diagonal is [[1, 5, 9]]

Next diagonal is [[4, 8]]

and the last-diagonal is [[7]]

CONSTRAINTS:
1 <= N <= 500

-10000 <= Mat[i][j] <= 10000

Topics
2D-Arrays
Companies
Amazon



import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] mat = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                mat[i][j] = sc.nextInt();
        }
        sc.close();
        ArrayList<Integer> res = diagonalTraversal(mat, n);
        for (Integer x : res)
            System.out.print(x + " ");
    }

    public static ArrayList<Integer> diagonalTraversal(int[][] mat, int n) {
        
        ArrayList<Integer> answer = new ArrayList<>();
        
        for(int i=n-1; i>=0; i=i-1) // all starting points 
        {
            int row = 0;
            int column = i; 
            
            while(row < n && column < n) // movement in downward direction 
            {
                answer.add(mat[row][column]);
                
                row = row + 1; 
                column = column + 1;
            }
        }
        
        for(int i=1; i<n; i=i+1) // all starting points 
        {
            int row = i;
            int column = 0; 
            
            while(row < n && column < n) // movement in downward direction 
            {
                answer.add(mat[row][column]);
                
                row = row + 1; 
                column = column + 1;
            }
        }
        
        return answer;
    }
}

