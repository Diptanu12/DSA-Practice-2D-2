Spiral Matrix 2
You are given a matrix with N rows and M columns. You have to start iterating downwards on the first column and then continue spirally. Print an array containing the spiral of the matrix in the said manner.

NOTE: You need to complete the given function. The input and printing of output will be handled by the driver code.

Input Format:
The first line contains t: the number of test cases.

For each test case: The first line contains N and M.

The next N lines contain M integers each representing the elements of the matrix.

Output Format:
Print an array containing the spiral of the matrix in the said manner.

Example 1:
Input:

1
3 3
1 4 7
2 5 8
3 6 9
Output:

1 2 3 6 9 8 7 4 5
Explanation:

We iterate spirally and print each element.

Example 2:
Input:

1
3 3
1 2 3
4 5 6
7 8 9
Output:

1 4 7 8 9 6 3 2 5
Explanation:

We iterate spirally and print each element.

Constraints:
1 <= T <= 10

1 <= N,M <= 200

0 <= A[i] <=1000000

Topics
2D-Arrays



import java.io.*;
import java.util.*;

class Main {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int r = sc.nextInt();
            int c = sc.nextInt();
            int matrix[][] = new int[r][c];
            for (int i = 0; i < r; i++) {
                for (int j = 0; j < c; j++)
                    matrix[i][j] = sc.nextInt();
            }

            ArrayList<Integer> ans = spirallyTraverse(matrix, r, c);
            for (Integer val : ans)
                System.out.print(val + " ");
            System.out.println();
        }
    }

    public static ArrayList<Integer> spirallyTraverse(int matrix[][], int r, int c) {
        ArrayList<Integer> result = new ArrayList<>();

        int topRow = 0, bottomRow = r - 1, leftColumn = 0, rightColumn = c - 1;

        while (topRow <= bottomRow && leftColumn <= rightColumn) {

            for (int i = topRow; i <= bottomRow; i++)
                result.add(matrix[i][leftColumn]);
            leftColumn++;

            if (leftColumn > rightColumn)
                break;

            for (int i = leftColumn; i <= rightColumn; i++)
                result.add(matrix[bottomRow][i]);
            bottomRow--;

            if (topRow > bottomRow)
                break;

            for (int i = bottomRow; i >= topRow; i--)
                result.add(matrix[i][rightColumn]);
            rightColumn--;

            if (leftColumn > rightColumn)
                break;

            for (int i = rightColumn; i >= leftColumn; i--)
                result.add(matrix[topRow][i]);
            topRow++;
        }

        return result;
    }
}
